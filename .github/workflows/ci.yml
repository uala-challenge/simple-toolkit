name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.64.7
          args: >
            --timeout=5m
            --tests=false
            ./...

  test:
    name: Run Unit Tests and Upload Coverage
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Run Tests with Coverage
        run: |
          go test -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out -o coverage.txt
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print substr($3, 1, length($3)-1)}')
          echo "Total coverage is ${COVERAGE}%"
          if (( $(echo "$COVERAGE < 80.0" | bc -l) )); then
            echo "Coverage is below 80%"
            exit 1
          fi

      - name: Check if mocks appear in coverage
        run: |
          echo "Checking if mocks are in coverage.out"
          grep "mock" coverage.out || echo "Mocks are NOT in coverage"

      - name: Upload Coverage Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Download Coverage Report Artifact
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: Debug Coverage Report
        run: |
          echo "Checking coverage.out before sending to SonarCloud..."
          grep "mock" coverage.out || echo "Mocks are NOT in coverage"
          cat coverage.out | head -20 # Imprime las primeras lÃ­neas del archivo

      - name: Run SonarCloud Scan
        run: |
          sonar-scanner \
            -Dsonar.organization=uala-challenge \
            -Dsonar.projectKey=uala-challenge_simple-toolkit \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.go.coverage.reportPaths=coverage.out \
            -Dsonar.verbose=true