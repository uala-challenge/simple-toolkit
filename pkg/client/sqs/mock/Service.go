// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	sqs "github.com/uala-challenge/simple-toolkit/pkg/client/sqs"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// DeleteMessage provides a mock function with given fields: ctx, receiptHandle
func (_m *Service) DeleteMessage(ctx context.Context, receiptHandle string) error {
	ret := _m.Called(ctx, receiptHandle)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, receiptHandle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReceiveMessage provides a mock function with given fields: ctx
func (_m *Service) ReceiveMessage(ctx context.Context) (sqs.Message, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ReceiveMessage")
	}

	var r0 sqs.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (sqs.Message, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) sqs.Message); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(sqs.Message)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
