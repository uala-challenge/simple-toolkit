// Code generated by mockery v2.52.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	resty "github.com/go-resty/resty/v2"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, endpoint, headers
func (_m *Service) Delete(ctx context.Context, endpoint string, headers map[string]string) (*resty.Response, error) {
	ret := _m.Called(ctx, endpoint, headers)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*resty.Response, error)); ok {
		return rf(ctx, endpoint, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) *resty.Response); ok {
		r0 = rf(ctx, endpoint, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, endpoint, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: ctx, endpoint, headers
func (_m *Service) Get(ctx context.Context, endpoint string, headers map[string]string) (*resty.Response, error) {
	ret := _m.Called(ctx, endpoint, headers)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) (*resty.Response, error)); ok {
		return rf(ctx, endpoint, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]string) *resty.Response); ok {
		r0 = rf(ctx, endpoint, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]string) error); ok {
		r1 = rf(ctx, endpoint, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: ctx, endpoint, body, headers
func (_m *Service) Patch(ctx context.Context, endpoint string, body interface{}, headers map[string]string) (*resty.Response, error) {
	ret := _m.Called(ctx, endpoint, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Patch")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) (*resty.Response, error)); ok {
		return rf(ctx, endpoint, body, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) *resty.Response); ok {
		r0 = rf(ctx, endpoint, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, map[string]string) error); ok {
		r1 = rf(ctx, endpoint, body, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Post provides a mock function with given fields: ctx, endpoint, body, headers
func (_m *Service) Post(ctx context.Context, endpoint string, body interface{}, headers map[string]string) (*resty.Response, error) {
	ret := _m.Called(ctx, endpoint, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) (*resty.Response, error)); ok {
		return rf(ctx, endpoint, body, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) *resty.Response); ok {
		r0 = rf(ctx, endpoint, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, map[string]string) error); ok {
		r1 = rf(ctx, endpoint, body, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Put provides a mock function with given fields: ctx, endpoint, body, headers
func (_m *Service) Put(ctx context.Context, endpoint string, body interface{}, headers map[string]string) (*resty.Response, error) {
	ret := _m.Called(ctx, endpoint, body, headers)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 *resty.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) (*resty.Response, error)); ok {
		return rf(ctx, endpoint, body, headers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, map[string]string) *resty.Response); ok {
		r0 = rf(ctx, endpoint, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resty.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, map[string]string) error); ok {
		r1 = rf(ctx, endpoint, body, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithLogging provides a mock function with given fields: enable
func (_m *Service) WithLogging(enable bool) {
	_m.Called(enable)
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
